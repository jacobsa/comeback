// Copyright 2012 Aaron Jacobs. All Rights Reserved.
// Author: aaronjjacobs@gmail.com (Aaron Jacobs)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package repr_proto;

message BlobInfoProto {
  // The SHA-1 hash of the blob, in 20-byte 'raw' form.
  optional bytes hash = 1;
}

// An instant in time, with nanosecond resolution.
message TimeProto {
  // The number of seconds since the Unix time epoch.
  optional int64 second = 1;

  // A nanosecond in the second specified above. This must be in the range
  // [0, 1e9).
  optional uint32 nanosecond = 2;
}

message FileInfoProto {
  enum Type {
    // Sentinel for a missing value.
    TYPE_UNKNOWN      = -1;

    TYPE_FILE         =  0;
    TYPE_DIRECTORY    =  1;
    TYPE_SYMLINK      =  2;
    TYPE_BLOCK_DEVICE =  3;
    TYPE_CHAR_DEVICE  =  4;
    TYPE_NAMED_PIPE   =  5;
  }
  optional Type type = 1;

  // The permissions bits for this file, as described in the documentation for
  // fs.FileInfo, with values as in the golang os package.
  optional uint32 permissions = 2;

  // The owning user's UID, and their username if known.
  optional uint32 uid = 3;
  optional string username = 4;

  // The owning user's GID, and their groupname if known.
  optional uint32 gid = 5;
  optional string groupname = 6;

  // The name of this child within its parent directory.
  optional string name = 7;

  // The modification time.
  optional TimeProto mtime = 8;

  // The zero or more blobs that make up a regular file's contents, to be
  // concatenated in order. Scores are present only if hard_link_target is not
  // present.
  repeated BlobInfoProto blob = 9;

  // DEPRECATED: See notes on fs.FileInfo.HardLinkTarget.
  optional string hard_link_target = 10;

  // The target, if this is a symlink.
  optional string target = 11;

  // The device number in a system-dependent format, if this is a device.
  optional int32 device_number = 12;

  // The inode number. This may not be present in old backups.
  optional uint64 inode = 13;

  // The size in bytes. This may not be present in old backups.
  optional uint64 size = 14;
}

message DirectoryListingProto {
  repeated FileInfoProto entry = 1;
}
