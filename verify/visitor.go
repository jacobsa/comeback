// Copyright 2015 Aaron Jacobs. All Rights Reserved.
// Author: aaronjjacobs@gmail.com (Aaron Jacobs)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package verify

import (
	"fmt"

	"github.com/googlecloudplatform/gcsfuse/timeutil"
	"github.com/jacobsa/comeback/blob"
	"github.com/jacobsa/comeback/fs"
	"github.com/jacobsa/comeback/graph"
	"github.com/jacobsa/comeback/repr"
	"golang.org/x/net/context"
)

// Create a visitor for the DAG of blobs in the supplied bucket. Node names are
// expected to be generated by Node.String.
//
// The visitor reads directory blobs, parses them, and emits their children as
// adjacent nodes. For file nodes, the visitor verifies that their score exists
// (according to allScores), and verifies that the blob can be loaded if
// readFiles is true.
//
// A record is written to the supplied channel for every piece of information
// that is certified.
//
// It is expected that the blob store's Load method does score verification for
// us.
func NewVisitor(
	readFiles bool,
	allScores []blob.Score,
	records chan<- Record,
	clock timeutil.Clock,
	bs blob.Store) (v graph.Visitor) {
	typed := &visitor{
		readFiles:   readFiles,
		records:     records,
		clock:       clock,
		blobStore:   bs,
		knownScores: make(map[blob.Score]struct{}),
	}

	for _, score := range allScores {
		typed.knownScores[score] = struct{}{}
	}

	v = typed
	return
}

////////////////////////////////////////////////////////////////////////
// Implementation
////////////////////////////////////////////////////////////////////////

type visitor struct {
	readFiles   bool
	records     chan<- Record
	clock       timeutil.Clock
	blobStore   blob.Store
	knownScores map[blob.Score]struct{}
}

func (v *visitor) visitFile(
	ctx context.Context,
	score blob.Score) (err error) {
	// If reading files is disabled, simply check that the score is known.
	if !v.readFiles {
		_, ok := v.knownScores[score]
		if !ok {
			err = fmt.Errorf("Unknown file score: %s", score.Hex())
			return
		}

		return
	}

	// Make sure we can load the blob contents. Presumably the blob store
	// verifies the score (of the ciphertext) on the way through.
	_, err = v.blobStore.Load(ctx, score)
	if err != nil {
		err = fmt.Errorf("Load(%s): %v", score.Hex(), err)
		return
	}

	return
}

func (v *visitor) visitDir(
	ctx context.Context,
	score blob.Score) (adjacent []string, err error) {
	// Load the blob contents.
	contents, err := v.blobStore.Load(ctx, score)
	if err != nil {
		err = fmt.Errorf("Load(%s): %v", score.Hex(), err)
		return
	}

	// Parse the listing.
	listing, err := repr.UnmarshalDir(contents)
	if err != nil {
		err = fmt.Errorf("UnmarshalDir(%s): %v", score.Hex(), err)
		return
	}

	// Return a node for each score in each entry.
	for _, entry := range listing {
		var n Node

		// Is this a directory?
		switch entry.Type {
		case fs.TypeFile:
			n.Dir = false

		case fs.TypeDirectory:
			n.Dir = true

		case fs.TypeSymlink:
			if len(entry.Scores) != 0 {
				err = fmt.Errorf(
					"Dir %s: symlink unexpectedly contains scores",
					score.Hex())

				return
			}

		default:
			err = fmt.Errorf("Dir %s: unknown entry type %v", score.Hex(), entry.Type)
			return
		}

		// Return a node for each score.
		for _, score := range entry.Scores {
			n.Score = score
			adjacent = append(adjacent, n.String())
		}
	}

	return
}

func (v *visitor) Visit(
	ctx context.Context,
	nodeName string) (adjacent []string, err error) {
	// Parse the node name.
	n, err := ParseNode(nodeName)
	if err != nil {
		err = fmt.Errorf("ParseNode(%q): %v", nodeName, err)
		return
	}

	if n.Dir {
		adjacent, err = v.visitDir(ctx, n.Score)
		return
	} else {
		err = v.visitFile(ctx, n.Score)
		return
	}
}
