// Copyright 2015 Aaron Jacobs. All Rights Reserved.
// Author: aaronjjacobs@gmail.com (Aaron Jacobs)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package verify

import (
	"fmt"
	"strings"
	"time"

	"github.com/jacobsa/comeback/blob"
)

const (
	filePrefix = "f:"
	dirPrefix  = "d:"
)

// A record certifying that a node was verified at a particular time.
type Record struct {
	Time time.Time

	// The node that was verified.
	//
	// For directory nodes, the record certifies that at Time we verified that a
	// piece of content with the given score was parseable as a directory listing
	// that referred to the given scores for its direct children.
	//
	// For file nodes, the record certifies that at Time we verified that a piece
	// of content with the given score was parseable as a piece of a file or
	// symlink. File nodes never have children.
	Node Node

	// Child nodes, present only for directories. See notes on Node above.
	Children []Node
}

// A node in the DAG of blobs in the supplied bucket.
type Node struct {
	Score blob.Score

	// If true, this node represents a directory listing that has zero or more
	// children. Otherwise, this is a file or a symlink.
	Dir bool
}

// Format the node as a standardized name that is guaranteed to be stable
// across invocations of the process.
func (n *Node) String() (s string) {
	if n.Dir {
		s = dirPrefix + n.Score.Hex()
	} else {
		s = filePrefix + n.Score.Hex()
	}

	return
}

// Parse a node name previously generated by Node.String.
func ParseNode(s string) (n Node, err error) {
	var hexScore string

	switch {
	case strings.HasPrefix(s, filePrefix):
		hexScore = strings.TrimPrefix(s, filePrefix)

	case strings.HasPrefix(s, dirPrefix):
		n.Dir = true
		hexScore = strings.TrimPrefix(s, dirPrefix)

	default:
		err = fmt.Errorf("Unknown prefix")
		return
	}

	n.Score, err = blob.ParseHexScore(hexScore)
	if err != nil {
		err = fmt.Errorf("ParseHexScore: %v", err)
		return
	}

	return
}
